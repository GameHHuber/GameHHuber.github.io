<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coordinate Generator</title>
    <style>
        /* Global reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        /* Dark theme background */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #1c1c1e;
            color: #f5f5f7;
            overflow: hidden;
        }

        /* Centered container */
        .container {
            text-align: center;
            max-width: 400px;
            width: 100%;
            animation: fadeIn 1s ease-in-out;
        }

        h1 {
            font-weight: 600;
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #ffffff;
            opacity: 0.9;
            animation: slideDown 0.8s ease forwards;
        }

        p {
            color: #a1a1aa;
            font-size: 1.1rem;
            margin-bottom: 1rem;
        }

        /* Coordinates Display */
        .coordinates {
            font-size: 1.5rem;
            font-weight: 500;
            color: #0a84ff;
            margin-bottom: 1rem;
        }

        /* Button design */
        .button {
            padding: 1rem 2rem;
            background-color: #0a84ff;
            color: #f5f5f7;
            font-size: 1rem;
            font-weight: 500;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
            box-shadow: 0 4px 12px rgba(10, 132, 255, 0.3);
            margin-top: 1rem;
        }

        .button:hover {
            background-color: #0a6fd8;
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(10, 132, 255, 0.5);
        }

        .button:active {
            background-color: #085bb5;
            transform: translateY(0);
            box-shadow: 0 3px 10px rgba(10, 132, 255, 0.2);
        }

        /* Disabled button styling */
        .button:disabled {
            background-color: #4e4e50;
            color: #8e8e8f;
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }

        /* Copy confirmation message */
        .copy-confirmation {
            font-size: 1rem;
            color: #0a84ff;
            opacity: 0;
            transition: opacity 0.3s ease;
            margin-top: 0.5rem;
        }

        .copy-confirmation.show {
            opacity: 1;
        }

        /* Checkbox styling */
        .checkbox-container {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 1rem;
            color: #a1a1aa;
            font-size: 1rem;
        }

        .checkbox-container label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }

        .checkbox-container input[type="checkbox"] {
            appearance: none;
            width: 20px;
            height: 20px;
            background-color: #2c2c2e;
            border: 2px solid #0a84ff;
            border-radius: 4px;
            margin-right: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }

        .checkbox-container input[type="checkbox"]:checked {
            background-color: #0a84ff;
        }

        .checkbox-container input[type="checkbox"]::before {
            content: "âœ”";
            color: #f5f5f7;
            font-size: 14px;
            display: none;
        }

        .checkbox-container input[type="checkbox"]:checked::before {
            display: block;
        }

        /* Animations */
        @keyframes fadeIn {
            0% { opacity: 0; }
            100% { opacity: 1; }
        }

        @keyframes slideDown {
            0% { transform: translateY(-20px); opacity: 0; }
            100% { transform: translateY(0); opacity: 1; }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Big Man's Random Coordinate Generator</h1>
        <p>Click below to generate coordinates</p>
        <div id="coordinates" class="coordinates">--</div>
        <div id="copyConfirmation" class="copy-confirmation">Copied!</div>
        <button class="button" onclick="generateCoordinates()">Generate Coordinates</button>
        <button id="copyButton" class="button" onclick="copyCoordinates()" disabled>Copy Coordinates</button>
        <div class="checkbox-container">
            <label>
                <input type="checkbox" id="mullensOnly" />
                Mullens WV only
            </label>
        </div>
    </div>

    <script>
        // Define land-based latitude and longitude ranges to reduce water-only coordinates
        const landRanges = [
            { latMin: -40, latMax: 60, lonMin: -130, lonMax: -60 }, // Americas
            { latMin: -35, latMax: 40, lonMin: 15, lonMax: 60 },   // Europe and Africa
            { latMin: -10, latMax: 55, lonMin: 70, lonMax: 150 }   // Asia and Australia
        ];

        let coordinates = ''; // Store the latest coordinates globally

        function generateCoordinates() {
            const mullensOnly = document.getElementById("mullensOnly").checked;
            let latitude, longitude;
            
            if (mullensOnly) {
                // Coordinates roughly around Mullens, WV
                latitude = (37.5805 + Math.random() * 0.01 - 0.005).toFixed(6);
                longitude = (-81.3837 + Math.random() * 0.01 - 0.005).toFixed(6);
            } else {
                // Generate random land-based coordinates
                const range = landRanges[Math.floor(Math.random() * landRanges.length)];
                latitude = (Math.random() * (range.latMax - range.latMin) + range.latMin).toFixed(6);
                longitude = (Math.random() * (range.lonMax - range.lonMin) + range.lonMin).toFixed(6);
            }

            coordinates = `${latitude}, ${longitude}`;
            document.getElementById("coordinates").textContent = coordinates;

            // Enable the copy button
            document.getElementById("copyButton").disabled = false;
        }

        function copyCoordinates() {
            if (coordinates) {
                navigator.clipboard.writeText(coordinates).then(() => {
                    showCopyConfirmation();
                }).catch((error) => {
                    console.error("Copy failed", error);
                });
            } else {
                console.error("No coordinates to copy");
            }
        }

        function showCopyConfirmation() {
            const confirmationElement = document.getElementById("copyConfirmation");
            confirmationElement.classList.add("show");

            // Hide the confirmation message after a short delay
            setTimeout(() => {
                confirmationElement.classList.remove("show");
            }, 1200);
        }
    </script>

</body>
</html>
